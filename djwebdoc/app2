lista=document.getElementsByClassName("highlight");
for (i=0; i < lista.length; i++){ 
aux=lista[i].textContent;
console.log("$$$$$");
console.log(aux);
}
$$$$$
$ python manage.py createsuperuser

$$$$$
Username: admin

$$$$$
Email address: admin@example.com

$$$$$
Password: **********
Password (again): *********
Superuser created successfully.

$$$$$
$ python manage.py runserver

$$$$$
ImportError at /admin/
cannot import name patterns
...

$$$$$
from django.contrib import admin

from .models import Question

admin.site.register(Question)

$$$$$
from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']

admin.site.register(Question, QuestionAdmin)

$$$$$
from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date']}),
    ]

admin.site.register(Question, QuestionAdmin)

$$$$$
from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]

admin.site.register(Question, QuestionAdmin)

$$$$$
from django.contrib import admin

from .models import Choice, Question
# ...
admin.site.register(Choice)

$$$$$
from django.contrib import admin

from .models import Choice, Question


class ChoiceInline(admin.StackedInline):
    model = Choice
    extra = 3


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]

admin.site.register(Question, QuestionAdmin)

$$$$$
class ChoiceInline(admin.TabularInline):
    #...

$$$$$
class QuestionAdmin(admin.ModelAdmin):
    # ...
    list_display = ('question_text', 'pub_date')

$$$$$
class QuestionAdmin(admin.ModelAdmin):
    # ...
    list_display = ('question_text', 'pub_date', 'was_published_recently')

$$$$$
class Question(models.Model):
    # ...
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
    was_published_recently.admin_order_field = 'pub_date'
    was_published_recently.boolean = True
    was_published_recently.short_description = 'Published recently?'

$$$$$
list_filter = ['pub_date']

$$$$$
search_fields = ['question_text']

$$$$$
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

$$$$$
$ python -c "
import sys
sys.path = sys.path[1:]
import django
print(django.__path__)"

$$$$$
{% block branding %}
<h1 id="site-name"><a href="{% url 'admin:index' %}">Polls Administration</a></h1>
{% endblock %}

undefined
